volumes:
  ckan_storage:
  pg_data:
  solr_data:
  jena_data:


services:
  nginx:
    env_file:
      - .env
    image: nginx:stable-alpine
    depends_on:
      ckan:
        condition: service_healthy
    ports:
      - "0.0.0.0:${NGINX_PORT_HOST}:${NGINX_PORT}"
      - "0.0.0.0:${NGINX_SSLPORT_HOST}:${NGINX_SSLPORT}"
    volumes:
      - ./config/nginx/default.conf.template:/etc/nginx/templates/default.conf.template
      - ./ckan-docker/nginx/setup/nginx.conf:/etc/nginx/nginx.conf
      - ./ckan-docker/nginx/setup/ckan-local.crt:/etc/nginx/certs/ckan-local.crt
      - ./ckan-docker/nginx/setup/ckan-local.key:/etc/nginx/certs/ckan-local.key
    networks:
      - datastack_net
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  ckan:
    image: ckan-dev
    build:
      context: ckan-docker/ckan/
      dockerfile: ../../config/ckan/Dockerfile.dev
      args:
        - TZ=${TZ}
    user: "503:502"
    environment:
      - DEBUG=true
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
      # fuseki:
      #   condition: service_healthy
    expose:
      - "${CKAN_PORT}"
    volumes:
      - ckan_storage:/var/lib/ckan
      - ./config/ckan/start_ckan.sh:/srv/app/start_ckan.sh
      - ./config/ckan/03_harvest.sh:/docker-entrypoint.d/03_harvest.sh
      - ./config/ckan/04_supervisor.sh:/docker-entrypoint.d/04_supervisor.sh
      - ./config/ckan/dcatde_themes.json:/srv/app/dcatde_themes.json
      - ./ckan_plugins:/srv/app/src_extensions
      # config for the background supervisor jobs
      - ./config/ckan/supervisor-ckan-worker.conf:/etc/supervisor/conf.d/ckan-worker.conf
      - ./logs:/srv/app/logs
    restart: unless-stopped
    entrypoint: /srv/app/start_ckan.sh
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://ckan:${CKAN_PORT}" ]
      interval: 60s
      start_period: 2m
      start_interval: 10s
    networks:
      - datastack_net
  db:
    build:
      context: ckan-docker/postgresql/
    env_file:
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
    networks:
      - datastack_net
  solr:
    image: ckan/ckan-solr:${SOLR_IMAGE_VERSION}
    volumes:
      - solr_data:/var/solr
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/" ]
    networks:
      - datastack_net
  redis:
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "-e", "QUIT" ]
    networks:
      - datastack_net
  fuseki:
    build:
      context: config/fuseki/
    restart: on-failure
    expose:
      - "3030"
    environment:
      - JVM_ARGS=-Xmx10g -DentityExpansionLimit=0 -Dhttp.proxyHost=${CKAN_HOST} -Dhttp.proxyPort=80
      - ADMIN_PASSWORD=${CKANINI__CKANEXT__FUSEKI__PASSWORD}
    volumes:
      - jena_data:/fuseki
    stop_grace_period: 10s
    healthcheck:
      test:
        - "CMD-SHELL"
        - "wget -qO /dev/null http://localhost:3030/$$/ping"
        - "test ! -f /system/tdb.lock"
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - datastack_net
  csvtocsvw:
    image: "ghcr.io/mat-o-lab/csvtocsvw:latest"
    environment:
      APP_MODE: "production"
      PORT: ${CSVTOCSVW_APP_PORT}
      SSL_VERIFY: False
      #ADMIN_MAIL: ${ADMIN_MAIL}
    expose:
      - ${CSVTOCSVW_APP_PORT}
    restart: always
    entrypoint: [ "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "${CSVTOCSVW_APP_PORT}", "--workers", "1", "--proxy-headers" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${CSVTOCSVW_APP_PORT}/info" ]
      interval: 60s
      timeout: 10s
      retries: 5
    networks:
      - datastack_net
  maptomethod:
    image: ghcr.io/mat-o-lab/maptomethod:latest
    environment:
      APP_NAME: "MapToMethod"
      PORT: ${MAPTOMETHOD_APP_PORT}
      SSL_VERIFY: ${CKANINI__CKANEXT__CSVWMAPANDTRANSFORM__SSL_VERIFY}
      SERVER_URL: ${CKAN_SITE_URL}/maptomethod
    expose:
      - ${MAPTOMETHOD_APP_PORT}
    restart: always
    entrypoint: [ "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "${MAPTOMETHOD_APP_PORT}", "--workers", "1", "--proxy-headers", "--root-path", "/maptomethod" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MAPTOMETHOD_APP_PORT}/info" ]
      interval: 60s
      timeout: 10s
      retries: 5
    networks:
      - datastack_net
  yarrrml-parser:
    environment:
      - PORT=${PARSER_PORT}
    image: ghcr.io/mat-o-lab/yarrrml-parser:v.1.0.2
    expose:
      - ${PARSER_PORT}
    restart: always
    networks:
      - datastack_net
  rmlmapper:
    # changing port doesnt work - issue on rmlmapper side
    environment:
      - PORT=${MAPPER_PORT}
    image: ghcr.io/mat-o-lab/rmlmapper-webapi:latest
    expose:
      - ${MAPPER_PORT}
    restart: always
    networks:
      - datastack_net
  rdfconverter:
    environment:
      PARSER_PORT: ${PARSER_PORT}
      MAPPER_PORT: ${MAPPER_PORT}
      PORT: ${RDFCONVERTER_APP_PORT}
      YARRRML_URL: http://yarrrml-parser:${PARSER_PORT}
      MAPPER_URL: http://rmlmapper:${MAPPER_PORT}
      APP_NAME: RDFConverter
      APP_MODE: "development"
      SSL_VERIFY: False
    expose:
      - ${RDFCONVERTER_APP_PORT}
    image: ghcr.io/mat-o-lab/rdfconverter:latest
    restart: always
    entrypoint: [ "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "${RDFCONVERTER_APP_PORT}", "--workers", "1", "--proxy-headers" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${RDFCONVERTER_APP_PORT}/info" ]
      interval: 60s
      timeout: 10s
      retries: 5
    networks:
      - datastack_net
  sparklis:
    expose:
      - 8080
    image: sferre/sparklis:latest
    networks:
      - datastack_net
    restart: unless-stopped
networks:
  datastack_net:
